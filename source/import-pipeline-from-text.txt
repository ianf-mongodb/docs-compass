.. _compass-import-pipeline:

=========================
Import Pipeline from Text
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can import aggregation pipelines from plain text into
the :ref:`Aggregation Pipeline Builder <compass-agg-builder>` to
easily modify and execute your pipelines. Importing a plain text
aggregation pipeline shows how each stage of the pipeline
affects the output, and illustrates the effects of modifying specific
pipeline stages using the Pipeline Builder's :guilabel:`Output` panes.

.. note:: Importing Pipelines From Text

   Starting in Compass 1.35, the import pipeline button has been removed
   from the Compass GUI. The full functionality of importing pipelines 
   from text is still supported as part of the View Pipeline as 
   Text edit mode.


Syntax
------

The imported pipeline must be:

- In the :manual:`MongoDB query language </tutorial/query-documents/>`,
  this is the same syntax used in the ``pipeline`` parameter of the
  :method:`aggregate() <db.collection.aggregate()>` method.
- An array, even if there is only one stage in the pipeline.

Procedure
---------

.. procedure::
   :style: normal

   .. step:: In the aggregation pipeline pane, click the 
      :guilabel:`</> Text` toggle switch to enable text mode for 
      pipeline editing.

      .. figure:: /images/compass/agg-builder-textview-toggle-on.png
         :alt: Toggle Textview Mode on

   .. step:: Type or paste an aggregation pipeline into the 
      text editor. The text editor provides real-time linting 
      for correct syntax and debugging information.

      For example, the following pipeline consists of a single 
      :pipeline:`$limit` stage: 

      .. code-block:: javascript

         [ { "$limit" : 4 } ]

      .. figure:: /images/compass/agg-builder-textview-edit.png
         :alt: Edit aggregation pipeline

After you import your pipeline, you can click the :guilabel:`{} Stages` 
switch to return to stage view mode. In this mode you can modify 
individual stages to see the results reflected in the 
:guilabel:`Output` of each respective stage.
