.. _prompt-natural-language-agg:

==============================================
Prompt your First Natural Language Aggregation
==============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1

You can use MongoDB Compass to generate aggregation queries using natural 
language. Compass uses AI to generate filter aggregations based on prompts 
you provide. Querying with natural language can be a helpful starting 
point and assist you in learning to write MongoDB queries.

About this Task
---------------

.. note::

   .. include:: /includes/fact-natural-language-query.rst

- You can also provide natural language prompts on the 
  :ref:`documents tab <prompt-natural-language-query>`.

- This page uses the :ref:`sample_mflix.movies <sample-mflix>` 
  collection from the Atlas sample dataset.

Before you Begin
----------------

You must :ref:`enable natural language querying in Compass<enable-natural-language-querying>`.

Steps
-----

.. procedure::
   :style: connected

   .. step:: Navigate to the :guilabel:`Natural Language Query Bar`
      
      I. Select the :guilabel:`Aggregations` tab.
      #. Click the :guilabel:`Generate aggregation` button.

      The :guilabel:`Natural Language Query Bar` displays.

   .. step:: Type a question about your collection

      Type a natural language prompt for your collection into the query 
      bar. For example: ``How many movies have more than 3 writers 
      in the writers array?``

      I. Press enter or click the :guilabel:`Generate query` button.
      #. An aggregation pipeline populates in the :guilabel:`Pipeline` 
         bar. You can scroll down to see the syntax of each stage.

   .. step:: Run the query

      I. Before running the query, make sure to thoroughly review the 
         syntax of each stage. Ensure the returned pipeline has the 
         fields and stages that match your desired use case.
      #. Press enter or click the :guilabel:`Run` button to execute 
         the pipeline.

      The results populate in the documents view.

      .. include:: /includes/fact-natural-language-feedback.rst

Example
-------

Below are examples of prompts to help you understand expected results 
when using natural language prompts for aggregation. Aggregation pipeline
prompts usually have an aggregation verb such as ``count``, ``average``,
or ``sum`` with logical conditions.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Prompt
     - Response

   * - Count the movies that have a release year of 1999 and have 
       countries of "USA"
     - 
      .. code-block:: json
            :copyable: false

            [
               {
                  $match: {
                     year: 1999,
                     countries: "USA",
                  },
               },
               {
                  $count: "total_movies",
               }
            ]

   * - Which comedy genre movie has the most awards?
     - 
      .. code-block:: json
            :copyable: false

            [
               {
                  $match: {
                     genres: "Comedy"
                  }
               },
               {
                  $sort: {
                     "awards.wins": -1,
                     "awards.nominations": -1
                  }
               },
               {
                  $limit: 1
               },
               {
                  $project: {
                     _id: 0,
                     title: 1,
                     "awards.wins": 1,
                     "awards.nominations": 1
                  }
               }
            ]

   * - How many movies have a ``tomatoes.viewer.rating`` greater than 4 and 
       a runtime of less than 90?
     - 
      .. code-block:: json
            :copyable: false

            [
               {
                  $match: {
                     "tomatoes.viewer.rating": {
                     $gt: 4,
                     },
                     runtime: {
                     $lt: 90,
                     },
                  },
               },
               {
                  $group: {
                     _id: null,
                     count: {
                     $sum: 1,
                     },
                  },
               }
            ]

Next Steps
----------

:ref:`prompt-natural-language-agg`

Learn More
----------

:ref:`query-natural-language`